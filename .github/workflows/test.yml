name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9, '3.10', '3.11']

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install -r requirements-dev.txt
    
    - name: Run tests
      run: |
        python -m pytest tests/ -v --tb=short
    
    - name: Test hook functionality
      run: |
        # Test creating default config
        python -m dir_checker --create-config
        
        # Test debug mode
        python -m dir_checker --debug-config
        
        # Create a test structure for generic config
        mkdir -p src/frontend/api/auth-component
        echo "{\"name\": \"auth\", \"version\": \"1.0.0\"}" > src/frontend/api/auth-component/package.json
        echo "module.exports = {}" > src/frontend/api/auth-component/index.js
        
        # Test successful validation with generic config
        python -m dir_checker --verbose
        
        # Test with terraform infrastructure example
        mkdir -p live/dev/networking/eu-central-1/vpc-component
        echo "# Test backend" > live/dev/networking/eu-central-1/vpc-component/backend.tf
        echo "# Test versions" > live/dev/networking/eu-central-1/vpc-component/versions.tf
        
        # Test with terraform config
        python -m dir_checker --config examples/directory-configs/terraform-infrastructure-config.yaml --verbose
        
        # Test with invalid structure (should fail)
        mkdir -p src/invalid-module/api/test-component
        echo "{\"name\": \"test\"}" > src/invalid-module/api/test-component/package.json
        echo "module.exports = {}" > src/invalid-module/api/test-component/index.js
        
        # Update config to fail on invalid values
        sed -i 's/fail_on_invalid_values: false/fail_on_invalid_values: true/' dir-checker-config.yaml
        
        if python -m dir_checker; then
          echo "ERROR: Hook should have failed but passed"
          exit 1
        else
          echo "SUCCESS: Hook correctly failed for invalid structure"
        fi

  test-configurations:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
    
    - name: Test YAML configuration
      run: |
        # Create custom YAML config
        cat > custom-config.yaml << EOF
        root_dir: "test"
        levels:
          - "env"
          - "component"
        max_depth: 2
        check_depth: true
        valid_values:
          env:
            - "dev"
            - "prod"
          component:
            - "*"
        mandatory_files:
          - "test.txt"
        EOF
        
        # Create test structure
        mkdir -p test/dev/comp1
        echo "test" > test/dev/comp1/test.txt
        
        # Test with custom config
        python -m dir_checker --config custom-config.yaml --verbose
    
    - name: Test JSON configuration
      run: |
        # Create custom JSON config
        cat > custom-config.json << EOF
        {
          "root_dir": "json-test",
          "levels": ["level1", "level2"],
          "max_depth": 2,
          "check_depth": true,
          "valid_values": {
            "level1": ["a", "b"],
            "level2": ["*"]
          },
          "mandatory_files": ["required.txt"]
        }
        EOF
        
        # Create test structure
        mkdir -p json-test/a/component
        echo "test" > json-test/a/component/required.txt
        
        # Test with JSON config
        python -m dir_checker --config custom-config.json --verbose

  pre-commit:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pre-commit
        pip install -e .
    
    - name: Create test structure for pre-commit
      run: |
        # Create a valid test structure for generic config
        mkdir -p src/frontend/api/auth-component
        echo "{\"name\": \"auth\", \"version\": \"1.0.0\"}" > src/frontend/api/auth-component/package.json
        echo "module.exports = {}" > src/frontend/api/auth-component/index.js
    
    - name: Run pre-commit
      run: |
        pre-commit run --all-files
